##to activate enviroment
.\env\Scripts\activate
##to opne python file
python test.py
##path
E:\main project\caputure\env\Lib\site-packages
import cv2
import numpy as np
import tensorflow as tf

# Load the pre-trained ML model
model = tf.keras.models.load_model('fruits_data.h5')

# Start capturing video from webcam
cap = cv2.VideoCapture(0)

# Set the frame size
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

# Define the crop region for the fruit
x, y, w, h = 200, 100, 200, 200

while True:
    # Read a frame from the video stream
    ret, frame = cap.read()

    # Crop the region of interest containing the fruit
    fruit = frame[y:y+h, x:x+w]

    # Display the cropped image
    cv2.imshow('Fruit', fruit)

    # Save the cropped image to file
    cv2.imwrite('fruit.jpg', fruit)

    # Load the saved image and preprocess it for the ML model
    img = cv2.imread('fruit.jpg')
    img = cv2.resize(img, (224, 224))
    img = img / 255.0
    img = np.expand_dims(img, axis=0)

    # Pass the image to the ML model and get the prediction
    preds = model.predict(img)

    # Display the prediction
    print(preds)
    # Define a dictionary to map indices to fruit labels
    label_dict = {0: "fresh apple", 1: "fresh banana", 2: "fresh orange", 3: "rotten apple", 4: "rotten banana", 5: "rotten orange"}

    # Get the index of the maximum value in the preds array
    pred_index = np.argmax(preds)

    # Check if the predicted class is above the threshold
    if preds[0][pred_index] > 0.5:
        # Get the corresponding fruit label from the dictionary
        label = label_dict[pred_index]
        print(f"The fruit is a {label}.")
    else:
        print("Please show a valid image.")

    # Wait for key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the capture and destroy all windows
cap.release()
cv2.destroyAllWindows()
