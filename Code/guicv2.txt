import cv2
import os
import zipfile
import smtplib
from email.message import EmailMessage
import tensorflow as tf
import numpy as np
import csv
import tkinter as tk



# Initialize the text-to-speech engine
# Load the trained ML model
model = tf.keras.models.load_model(
    '/home/echo/project/env/lib/python3.9/site-packages/fruits_datas.h5')

# Set up the email parameters
from_email = 'codeinechoniner@gmail.com'
from_password = 'yhqjkahoevcixcth'
to_email = 'jeromgladsun@gmail.com'

# Set up the folder for saving the images
image_folder = 'fruit_images'
if not os.path.exists(image_folder):
    os.mkdir(image_folder)
# Delete all files in the image folder
filelist = [f for f in os.listdir(image_folder)]
for f in filelist:
    os.remove(os.path.join(image_folder, f))

# Set up the CSV file for saving the results
csv_filename = 'iruit_results.csv'
with open(csv_filename, mode='w', newline='') as csv_file:
    writer = csv.writer(csv_file)
    writer.writerow(['Image File', 'Label', 'Fruit_Name', 'Confidence'])

# Set up the counters for fresh and rotten fruits
fresh_count = 0
rotten_count = 0

# Start capturing video from webcam
cap = cv2.VideoCapture(0)

# Set the frame size
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)


def detect_fruits():
    global fresh_count, rotten_count

    while True:
        # Read a frame from the video stream
        ret, frame = cap.read()

        # Display the original frame
        cv2.imshow('Fruit Detector', frame)

        # Wait for key press
        key = cv2.waitKey(1)
        if key == ord('q'):
            # Create a zip archive of the image folder
            zip_filename = 'fruit_images.zip'
            with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                for root, dirs, files in os.walk(image_folder):
                    for file in files:
                        zip_file.write(os.path.join(root, file))

            # Send an email with the results and the image folder zip archive
            msg = EmailMessage()
            msg['Subject'] = 'Fruit Detection Results'
            msg['From'] = from_email
            msg['To'] = to_email
            msg.set_content(
                f'Fresh fruits: {fresh_count}, Rotten fruits: {rotten_count}')

                    with open(csv_filename, 'rb') as csv_file:
            csv_data = csv_file.read()
            msg.add_attachment(csv_data, maintype='application', subtype='octet-stream', filename=csv_filename)

        with open(zip_filename, 'rb') as zip_file:
            zip_data = zip_file.read()
            msg.add_attachment(zip_data, maintype='application', subtype='zip', filename=zip_filename)

        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(from_email, from_password)
            smtp.send_message(msg)

        # Reset the counters
        fresh_count = 0
        rotten_count = 0

        # Delete all files in the image folder
        filelist = [f for f in os.listdir(image_folder)]
        for f in filelist:
            os.remove(os.path.join(image_folder, f))

        # Stop capturing video from webcam
        cap.release()
        cv2.destroyAllWindows()
        break

    elif key == ord('c'):
        # Capture a new image of a fruit
        ret, frame = cap.read()
        timestamp = int(time.time())
        image_filename = f'{image_folder}/{timestamp}.jpg'
        cv2.imwrite(image_filename, frame)

        # Preprocess the image
        img = cv2.imread(image_filename)
        img = cv2.resize(img, (100, 100))
        img = img / 255.0
        img = np.expand_dims(img, axis=0)

        # Make a prediction with the ML model
        prediction = model.predict(img)
        label = np.argmax(prediction)
        confidence = np.max(prediction)

        # Get the name of the predicted fruit
        fruit_names = ['fresh_apple', 'fresh_banana', 'fresh_orange',
                       'rotten_apple', 'rotten_banana', 'rotten_orange']
        fruit_name = fruit_names[label]

        # Update the counters for fresh and rotten fruits
        if label in [0, 1, 2]:
            fresh_count += 1
        else:
            rotten_count += 1

        # Save the results to the CSV file
        with open(csv_filename, mode='a', newline='') as csv_file:
            writer = csv.writer(csv_file)
            writer.writerow([image_filename, label, fruit_name, confidence])
root = tk.Tk()
root.geometry("300x100")
root.title("Fruit Detector")
detect_button = tk.Button(root, text="Start Detection", command=detect_fruits)
detect_button.pack()
root.mainloop()
# Release the resources
cap.release()
cv2.destroyAllWindows()
